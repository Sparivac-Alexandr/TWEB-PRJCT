@model List<taskoreBusinessLogic.DBModel.ProjectApplicationDBModel>

@{
    ViewBag.Title = "Applied Projects";
}

@Html.Partial("_Header")

<div class="container">
    <div class="projects-content">
        <h1>Applied Projects</h1>
        
        <div class="filter-controls">
            <div class="filter-row">
                <div class="search-box">
                    <input type="text" id="project-search" placeholder="Search projects..." class="search-input">
                    <button class="search-button" id="search-btn">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-search">
                            <circle cx="11" cy="11" r="8"></circle>
                            <path d="m21 21-4.3-4.3"></path>
                        </svg>
                    </button>
                </div>
                <div class="sort-controls">
                    <select id="sort-projects" class="filter-select">
                        <option value="">Sort By</option>
                        <option value="name-asc">Project Name (A-Z)</option>
                        <option value="name-desc">Project Name (Z-A)</option>
                        <option value="progress-asc">Progress (Low to High)</option>
                        <option value="progress-desc">Progress (High to Low)</option>
                        <option value="status">Status</option>
                    </select>
                </div>
            </div>
        </div>

        @if (Model == null || !Model.Any())
        {
            <div class="no-projects">
                <h3>No projects found</h3>
                <p>You haven't applied to any projects yet. <a href="@Url.Action("ExplorePage", "Main")">Explore projects</a> to find work.</p>
            </div>
        }
        else
        {
            <div class="project-cards" id="projects-container">
                @foreach (var project in Model)
                {
                    var status = string.IsNullOrEmpty(project.Status) ? "Ready to Apply" : project.Status;
                    <div class="project-card-modern" data-title="@project.Title" data-progress="@project.Progress" data-status="@status">
                        <div class="card-header">
                            <h3 class="project-title">@project.Title</h3>
                            <span class="project-status-badge @status.ToLower().Replace(" ", "-")">@status</span>
                            <div class="settings-icon">
                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                    <circle cx="12" cy="12" r="3"></circle>
                                    <path d="M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1-1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z"></path>
                                </svg>
                            </div>
                        </div>

                        <div class="card-details">
                            <div class="detail-row">
                                <span class="detail-label">Client</span>
                                <span class="detail-value">@project.Client</span>
                            </div>
                            <div class="detail-row">
                                <span class="detail-label">Freelancer</span>
                                <span class="detail-value">@project.Freelancer</span>
                            </div>
                        </div>

                        <div class="card-details">
                            <div class="detail-row">
                                <span class="detail-label">Budget</span>
                                <span class="detail-value">@project.Budget</span>
                            </div>
                            <div class="detail-row">
                                <span class="detail-label">Timeline</span>
                                <span class="detail-value">@project.StartDate.ToString("yyyy-MM-dd") to @project.EndDate.ToString("yyyy-MM-dd")</span>
                            </div>
                        </div>

                        <div class="progress-section">
                            <div class="progress-header">
                                <span>Project Progress</span>
                                <span>@project.Progress%</span>
                            </div>
                            <div class="progress-bar">
                                <div class="progress-fill" style="width: @(project.Progress)%;"></div>
                            </div>
                        </div>

                        <div class="card-actions">
                            <a href="@Url.Action("EditProject", "Main", new { id = project.Id })" class="edit-project-btn">
                                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                    <path d="M12 20h9"></path>
                                    <path d="M16.5 3.5a2.121 2.121 0 0 1 3 3L7 19l-4 1 1-4L16.5 3.5z"></path>
                                </svg>
                                Edit Project
                            </a>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>

<style>
    .project-cards {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(500px, 1fr));
        gap: 20px;
        margin-top: 20px;
    }
    
    .project-card-modern {
        background-color: #fff;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        padding: 20px;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }
    
    .project-card-modern:hover {
        transform: translateY(-5px);
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    }
    
    .card-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
        position: relative;
    }
    
    .project-title {
        margin: 0;
        font-size: 1.5rem;
        color: #333;
        font-weight: 600;
    }
    
    .project-status {
        background-color: #e6f7ff;
        color: #1890ff;
        padding: 5px 10px;
        border-radius: 15px;
        font-size: 0.8rem;
        font-weight: 500;
    }
    
    .settings-icon {
        color: #666;
        cursor: pointer;
    }
    
    .card-details {
        display: flex;
        justify-content: space-between;
        margin-bottom: 15px;
    }
    
    .detail-row {
        flex: 1;
    }
    
    .detail-label {
        display: block;
        color: #666;
        font-size: 0.85rem;
        margin-bottom: 5px;
    }
    
    .detail-value {
        color: #333;
        font-weight: 500;
        font-size: 1rem;
    }
    
    .progress-section {
        margin-top: 20px;
        margin-bottom: 20px;
    }
    
    .progress-header {
        display: flex;
        justify-content: space-between;
        margin-bottom: 8px;
        font-size: 0.9rem;
    }
    
    .progress-bar {
        height: 8px;
        background-color: #f0f0f0;
        border-radius: 4px;
        overflow: hidden;
    }
    
    .progress-fill {
        height: 100%;
        background-color: #4096ff;
        border-radius: 4px;
    }
    
    .card-actions {
        text-align: center;
        margin-top: 20px;
    }
    
    .edit-project-btn {
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: #4096ff;
        color: white;
        border: none;
        border-radius: 5px;
        padding: 10px 20px;
        font-weight: 500;
        cursor: pointer;
        text-decoration: none;
        transition: background-color 0.2s ease;
    }
    
    .edit-project-btn svg {
        margin-right: 8px;
    }
    
    .edit-project-btn:hover {
        background-color: #1677ff;
    }
    
    .no-projects {
        text-align: center;
        padding: 50px 20px;
        background-color: #f9f9f9;
        border-radius: 10px;
        margin-top: 20px;
    }
    
    .no-projects h3 {
        margin-bottom: 10px;
        color: #333;
    }
    
    .no-projects p {
        color: #666;
    }
    
    .no-projects a {
        color: #1890ff;
        text-decoration: none;
        font-weight: 500;
    }
    
    /* Filter controls styles */
    .filter-controls {
        margin-bottom: 20px;
    }
    
    .filter-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        gap: 15px;
    }
    
    .search-box {
        position: relative;
        flex-grow: 1;
    }
    
    .search-input {
        width: 100%;
        padding: 12px 40px 12px 15px;
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        font-size: 14px;
        outline: none;
        transition: border-color 0.2s;
    }
    
    .search-input:focus {
        border-color: #4096ff;
    }
    
    .search-button {
        position: absolute;
        right: 10px;
        top: 50%;
        transform: translateY(-50%);
        border: none;
        background: none;
        color: #666;
        cursor: pointer;
        outline: none;
    }
    
    .filter-select {
        padding: 12px 15px;
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        font-size: 14px;
        outline: none;
        background-color: white;
        cursor: pointer;
        min-width: 200px;
    }
    
    .filter-select:focus {
        border-color: #4096ff;
    }
    
    .sort-controls {
        display: flex;
        gap: 10px;
    }
    
    .project-status-badge {
        padding: 5px 12px;
        border-radius: 15px;
        font-size: 0.85rem;
        font-weight: 600;
        margin-left: 10px;
        display: inline-block;
    }
    .project-status-badge.in-progress {
        background: #fffbe6;
        color: #d48806;
        border: 1px solid #ffe58f;
    }
    .project-status-badge.completed {
        background: #e6fffb;
        color: #08979c;
        border: 1px solid #87e8de;
    }
    .project-status-badge.ready-to-apply {
        background: #f0f5ff;
        color: #2f54eb;
        border: 1px solid #adc6ff;
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const searchInput = document.getElementById('project-search');
        const searchButton = document.getElementById('search-btn');
        const sortSelect = document.getElementById('sort-projects');
        const projectsContainer = document.getElementById('projects-container');
        const projectCards = Array.from(document.querySelectorAll('.project-card-modern'));
        
        // Function to filter projects based on search term
        function filterProjects() {
            const searchTerm = searchInput.value.toLowerCase();
            
            projectCards.forEach(card => {
                const title = card.getAttribute('data-title').toLowerCase();
                const status = card.getAttribute('data-status').toLowerCase();
                const cardContent = card.textContent.toLowerCase();
                
                if (title.includes(searchTerm) || status.includes(searchTerm) || cardContent.includes(searchTerm)) {
                    card.style.display = '';
                } else {
                    card.style.display = 'none';
                }
            });
            
            // Check if any cards are visible
            const visibleCards = projectCards.filter(card => card.style.display !== 'none');
            if (visibleCards.length === 0) {
                // Show a message if no projects match the search
                let noResults = document.querySelector('.no-results');
                if (!noResults) {
                    noResults = document.createElement('div');
                    noResults.className = 'no-projects no-results';
                    noResults.innerHTML = '<h3>No matching projects</h3><p>Try adjusting your search criteria.</p>';
                    projectsContainer.parentNode.appendChild(noResults);
                } else {
                    noResults.style.display = '';
                }
            } else {
                // Hide the no results message if it exists
                const noResults = document.querySelector('.no-results');
                if (noResults) {
                    noResults.style.display = 'none';
                }
            }
        }
        
        // Function to sort projects
        function sortProjects() {
            const sortValue = sortSelect.value;
            if (!sortValue) return;
            
            const visibleCards = projectCards.filter(card => card.style.display !== 'none');
            
            visibleCards.sort((a, b) => {
                switch (sortValue) {
                    case 'name-asc':
                        return a.getAttribute('data-title').localeCompare(b.getAttribute('data-title'));
                    case 'name-desc':
                        return b.getAttribute('data-title').localeCompare(a.getAttribute('data-title'));
                    case 'progress-asc':
                        return parseInt(a.getAttribute('data-progress')) - parseInt(b.getAttribute('data-progress'));
                    case 'progress-desc':
                        return parseInt(b.getAttribute('data-progress')) - parseInt(a.getAttribute('data-progress'));
                    case 'status':
                        return a.getAttribute('data-status').localeCompare(b.getAttribute('data-status'));
                    default:
                        return 0;
                }
            });
            
            // Re-append cards in sorted order
            visibleCards.forEach(card => {
                projectsContainer.appendChild(card);
            });
        }
        
        // Event listeners
        if (searchInput) {
            searchInput.addEventListener('input', filterProjects);
            searchInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    filterProjects();
                    e.preventDefault();
                }
            });
        }
        
        if (searchButton) {
            searchButton.addEventListener('click', filterProjects);
        }
        
        if (sortSelect) {
            sortSelect.addEventListener('change', function() {
                sortProjects();
            });
        }
    });
</script>

@Html.Partial("_Footer") 