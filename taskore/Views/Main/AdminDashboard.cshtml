@{
    ViewBag.Title = "Admin Dashboard";
    Layout = "~/Views/Shared/_Layout.cshtml";

    // Get the current user's name from session
    string userFullName = Session["UserFullName"] as string ?? "Admin";
    int userId = Session["UserId"] != null ? (int)Session["UserId"] : 1;

    // Declare projectService
    var _projectService = new taskoreBusinessLogic.BL_Struct.ProjectBL();
}

// Add helper method for fetching user names
@functions {
    public string FetchUserName(int userId)
    {
        try
        {
            using (var context = new taskoreBusinessLogic.DBModel.Seed.UserContext())
            {
                var user = context.Users.FirstOrDefault(u => u.Id == userId);
                return user != null ? string.Format("{0} {1}", user.FirstName, user.LastName) : "Unknown User";
            }
        }
        catch
        {
            return "Unknown User";
        }
    }
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">


<div class="admin-container">
    <div class="admin-sidebar">
        <div class="admin-sidebar-header">
            <i class="fas fa-tachometer-alt"></i> Admin
        </div>
        <ul>
            <li><a href="#" class="active" data-section="manage-users-section"><i class="fas fa-users"></i> Manage Users</a></li>
            <li><a href="#" data-section="manage-projects-section"><i class="fas fa-project-diagram"></i> Manage Projects</a></li>
            <li><a href="#" data-section="add-post-section"><i class="fas fa-plus-circle"></i> Add New Post</a></li>
            <li><a href="#" data-section="manage-posts-section"><i class="fas fa-newspaper"></i> Manage Posts</a></li>
        </ul>
    </div>

    <div class="admin-content">
        <!-- Manage Users Section - Empty -->
        <div id="manage-users-section" class="content-section">
            <h1>Manage Users</h1>
            <p class="text-muted">View and manage system users.</p>

            @if (!string.IsNullOrEmpty(TempData["UserSuccessMessage"]?.ToString()))
            {
                <div class="custom-alert custom-alert-success">
                    <i class="fas fa-check-circle me-2"></i>
                    <span>@TempData["UserSuccessMessage"]</span>
                    <button type="button" class="custom-alert-close" onclick="this.parentElement.remove()">&times;</button>
                </div>
            }

            @if (!string.IsNullOrEmpty(TempData["UserErrorMessage"]?.ToString()))
            {
                <div class="custom-alert custom-alert-danger">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    <span>@TempData["UserErrorMessage"]</span>
                    <button type="button" class="custom-alert-close" onclick="this.parentElement.remove()">&times;</button>
                </div>
            }

            <div class="row mt-4">
                <div class="col-md-12">
                    <div class="chart-container">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <h3>All Users</h3>
                        </div>
                        <div class="table-responsive">
                            <table class="table table-hover" id="usersTable">
                                <thead class="table-light">
                                    <tr>
                                        <th>ID</th>
                                        <th>Name</th>
                                        <th>Email</th>
                                        <th>User Type</th>
                                        <th>Registration Date</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @{
                                        try
                                        {
                                            using (var context = new taskoreBusinessLogic.DBModel.Seed.UserContext())
                                            {
                                                var allUsers = context.Users.ToList();

                                                if (allUsers != null && allUsers.Any())
                                                {
                                                    foreach (var user in allUsers)
                                                    {
                                                        <tr>
                                                            <td>@user.Id</td>
                                                            <td>
                                                                <div class="d-flex align-items-center">
                                                                    <div class="ms-2">
                                                                        <div>@user.FirstName @user.LastName</div>
                                                                        <div class="text-muted small">@(string.IsNullOrEmpty(user.Email) ? "No email" : user.Email)</div>
                                                                    </div>
                                                                </div>
                                                            </td>
                                                            <td>@user.Email</td>
                                                            <td>
                                                                <span class="badge bg-secondary">User</span>
                                                            </td>
                                                            <td>N/A</td>
                                                            <td>
                                                                <div class="btn-group">
                                                                    <button type="button" class="btn btn-sm btn-outline-danger delete-user" data-id="@user.Id" title="Delete" onclick="confirmDeleteUser(@user.Id)">
                                                                        <i class="fas fa-trash-alt"></i>
                                                                    </button>
                                                                </div>
                                                            </td>
                                                        </tr>
                                                    }
                                                }
                                                else
                                                {
                                                    <tr>
                                                        <td colspan="6" class="text-center py-4">
                                                            <div class="text-muted">
                                                                <i class="fas fa-info-circle me-2"></i> No users found
                                                            </div>
                                                        </td>
                                                    </tr>
                                                }
                                            }
                                        }
                                        catch (Exception error)
                                        {
                                            <tr>
                                                <td colspan="6" class="text-center py-4">
                                                    <div class="text-danger">
                                                        <i class="fas fa-exclamation-triangle me-2"></i> Error loading users: @error.Message
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Manage Projects Section -->
        <div id="manage-projects-section" class="content-section">
            <h1>Manage Projects</h1>
            <p class="text-muted">View and manage all projects.</p>

            @if (!string.IsNullOrEmpty(TempData["ProjectSuccessMessage"]?.ToString()))
            {
                <div class="custom-alert custom-alert-success">
                    <i class="fas fa-check-circle me-2"></i>
                    <span>@TempData["ProjectSuccessMessage"]</span>
                    <button type="button" class="custom-alert-close" onclick="this.parentElement.remove()">&times;</button>
                </div>
            }

            @if (!string.IsNullOrEmpty(TempData["ProjectErrorMessage"]?.ToString()))
            {
                <div class="custom-alert custom-alert-danger">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    <span>@TempData["ProjectErrorMessage"]</span>
                    <button type="button" class="custom-alert-close" onclick="this.parentElement.remove()">&times;</button>
                </div>
            }

            <div class="row mt-4">
                <div class="col-md-12">
                    <div class="chart-container">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <h3>All Projects</h3>
                            <div class="d-flex gap-2">
                                <select class="form-select form-select-sm" id="filterCategory">
                                    <option value="">All Categories</option>
                                    <option value="Web Development">Web Development</option>
                                    <option value="Graphic Design">Graphic Design</option>
                                    <option value="Content Writing">Content Writing</option>
                                    <option value="Digital Marketing">Digital Marketing</option>
                                    <option value="Mobile Apps">Mobile Apps</option>
                                </select>
                                <button class="btn btn-sm btn-outline-secondary" id="resetProjectFilter">
                                    <i class="fas fa-sync-alt"></i> Reset
                                </button>
                            </div>
                        </div>
                        <div class="table-responsive">
                            <table class="table table-hover" id="projectsTable">
                                <thead class="table-light">
                                    <tr>
                                        <th>ID</th>
                                        <th>Title</th>
                                        <th>Category</th>
                                        <th>Budget</th>
                                        <th>Deadline</th>
                                        <th>Created By</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @{
                                        try
                                        {
                                            var projectService = _projectService ?? new taskoreBusinessLogic.BL_Struct.ProjectBL();
                                            var allProjects = projectService.GetAllProjects();

                                            if (allProjects != null && allProjects.Any())
                                            {
                                                foreach (var project in allProjects)
                                                {
                                                    <tr data-category="@project.Category">
                                                        <td>@project.Id</td>
                                                        <td>
                                                            <div class="text-truncate" style="max-width: 250px;" title="@project.Title">
                                                                @project.Title
                                                            </div>
                                                        </td>
                                                        <td>
                                                            <span class="badge bg-secondary">@project.Category</span>
                                                        </td>
                                                        <td>@project.Budget</td>
                                                        <td>@(!string.IsNullOrEmpty(project.Deadline) ? project.Deadline : "No deadline")</td>
                                                        <td>@FetchUserName(project.UserId)</td>
                                                        <td>
                                                            <div class="btn-group">
                                                                <button type="button" class="btn btn-sm btn-outline-primary edit-project" data-id="@project.Id" title="Edit" onclick="editProjectItem(@project.Id)">
                                                                    <i class="fas fa-edit"></i>
                                                                </button>
                                                                <button type="button" class="btn btn-sm btn-outline-danger delete-project" data-id="@project.Id" title="Delete" onclick="confirmDeleteProject(@project.Id)">
                                                                    <i class="fas fa-trash-alt"></i>
                                                                </button>
                                                            </div>
                                                        </td>
                                                    </tr>
                                                }
                                            }
                                            else
                                            {
                                                <tr>
                                                    <td colspan="7" class="text-center py-4">
                                                        <div class="text-muted">
                                                            <i class="fas fa-info-circle me-2"></i> No projects found
                                                        </div>
                                                    </td>
                                                </tr>
                                            }
                                        }
                                        catch (Exception error)
                                        {
                                            <tr>
                                                <td colspan="7" class="text-center py-4">
                                                    <div class="text-danger">
                                                        <i class="fas fa-exclamation-triangle me-2"></i> Error loading projects: @error.Message
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Edit Project Modal -->
            <div id="editProjectModal" class="custom-modal">
                <div class="custom-modal-dialog">
                    <div class="custom-modal-content">
                        <div class="custom-modal-header">
                            <h5 class="custom-modal-title">Edit Project</h5>
                            <button type="button" class="custom-modal-close" onclick="closeModal('editProjectModal')">&times;</button>
                        </div>
                        <div class="custom-modal-body">
                            <form id="editProjectForm">
                                <input type="hidden" id="editProjectId" name="Id" />

                                <div class="mb-3">
                                    <label for="editProjectTitle" class="form-label">Title</label>
                                    <input type="text" class="form-control" id="editProjectTitle" name="Title" required>
                                </div>

                                <div class="mb-3">
                                    <label for="editProjectDescription" class="form-label">Description</label>
                                    <textarea class="form-control" id="editProjectDescription" name="Description" rows="4" required></textarea>
                                </div>

                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label for="editProjectCategory" class="form-label">Category</label>
                                            <select class="form-control" id="editProjectCategory" name="Category" required>
                                                <option value="Web Development">Web Development</option>
                                                <option value="Graphic Design">Graphic Design</option>
                                                <option value="Content Writing">Content Writing</option>
                                                <option value="Digital Marketing">Digital Marketing</option>
                                                <option value="Mobile Apps">Mobile Apps</option>
                                            </select>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label for="editProjectBudget" class="form-label">Budget</label>
                                            <input type="text" class="form-control" id="editProjectBudget" name="Budget" required>
                                        </div>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label for="editProjectDeadline" class="form-label">Deadline</label>
                                            <select class="form-control" id="editProjectDeadline" name="Deadline">
                                                <option value="">No deadline</option>
                                                <option value="Urgent (24h)">Urgent (24h)</option>
                                                <option value="Within a week">Within a week</option>
                                                <option value="Within a month">Within a month</option>
                                                <option value="Long-term">Long-term</option>
                                            </select>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label for="editProjectRequiredSkills" class="form-label">Required Skills</label>
                                            <input type="text" class="form-control" id="editProjectRequiredSkills" name="RequiredSkills" placeholder="Skills separated by commas">
                                        </div>
                                    </div>
                                </div>
                            </form>
                        </div>
                        <div class="custom-modal-footer">
                            <button type="button" class="btn btn-secondary" onclick="closeModal('editProjectModal')">Cancel</button>
                            <button type="button" class="btn btn-primary" id="saveProjectChanges">Save Changes</button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- End of Edit Project Modal -->
        </div>

        <!-- Add New Post Section -->
        <div id="add-post-section" class="content-section">
            <h1>Add New Post</h1>
            <p class="text-muted">Create a new news post.</p>

            <div class="row mt-4">
                <div class="col-md-12">
                    <div class="chart-container">
                        <form id="addNewsForm" action="@Url.Action("AddNews", "Main")" method="post">
                            @Html.AntiForgeryToken()

                            <div class="mb-3">
                                <label for="Title" class="form-label">Title <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="Title" name="Title" required>
                            </div>

                            <div class="mb-3">
                                <label for="Content" class="form-label">Content <span class="text-danger">*</span></label>
                                <textarea class="form-control" id="Content" name="Content" rows="6" required></textarea>
                            </div>

                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="Category" class="form-label">Category <span class="text-danger">*</span></label>
                                        <select class="form-control" id="Category" name="Category" required>
                                            <option value="Updates">Updates</option>
                                            <option value="Events">Events</option>
                                            <option value="Market Insights">Market Insights</option>
                                            <option value="Success Stories">Success Stories</option>
                                            <option value="Security">Security</option>
                                        </select>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="Priority" class="form-label">Priority <span class="text-danger">*</span></label>
                                        <select class="form-control" id="Priority" name="Priority" required>
                                            <option value="High">High</option>
                                            <option value="Medium">Medium</option>
                                            <option value="Low">Low</option>
                                        </select>
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="Author" class="form-label">Author <span class="text-danger">*</span></label>
                                        <input type="text" class="form-control" id="Author" name="Author" required value="@userFullName">
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="ImageUrl" class="form-label">Image URL</label>
                                        <input type="text" class="form-control" id="ImageUrl" name="ImageUrl" placeholder="https://example.com/image.jpg">
                                    </div>
                                </div>
                            </div>

                            <div class="text-end mt-4">
                                <button type="button" class="btn btn-secondary me-2" onclick="clearForm()">Clear Form</button>
                                <button type="submit" class="btn btn-primary">Publish Post</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>

        <!-- Manage Posts Section -->
        <div id="manage-posts-section" class="content-section">
            <h1>Manage Posts</h1>
            <p class="text-muted">View, edit, and delete existing news posts.</p>

            @if (!string.IsNullOrEmpty(TempData["SuccessMessage"]?.ToString()))
            {
                <div class="alert alert-success d-flex align-items-center" role="alert">
                    <i class="fas fa-check-circle me-2"></i>
                    <span>@TempData["SuccessMessage"]</span>
                </div>
            }

            @if (!string.IsNullOrEmpty(TempData["ErrorMessage"]?.ToString()))
            {
                <div class="alert alert-danger d-flex align-items-center" role="alert">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    <span>@TempData["ErrorMessage"]</span>
                </div>
            }

            <div class="row mt-4">
                <div class="col-md-12">
                    <div class="chart-container">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <h3>All News Posts</h3>
                            <div class="d-flex gap-2">
                                <select class="form-select form-select-sm" id="filterCategory">
                                    <option value="">All Categories</option>
                                    <option value="Updates">Updates</option>
                                    <option value="Events">Events</option>
                                    <option value="Market Insights">Market Insights</option>
                                    <option value="Success Stories">Success Stories</option>
                                    <option value="Security">Security</option>
                                </select>
                                <select class="form-select form-select-sm" id="filterPriority">
                                    <option value="">All Priorities</option>
                                    <option value="High">High</option>
                                    <option value="Medium">Medium</option>
                                    <option value="Low">Low</option>
                                </select>
                                <button class="btn btn-sm btn-outline-secondary" id="resetFilter">
                                    <i class="fas fa-sync-alt"></i> Reset
                                </button>
                            </div>
                        </div>
                        <div class="table-responsive">
                            <table class="table table-hover" id="newsTable">
                                <thead class="table-light">
                                    <tr>
                                        <th>ID</th>
                                        <th>Title</th>
                                        <th>Category</th>
                                        <th>Priority</th>
                                        <th>Author</th>
                                        <th>Date Published</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @{
                                        try
                                        {
                                            var newsService = new taskoreBusinessLogic.BL_Struct.NewsBL();
                                            var allNews = newsService.GetAllNews();

                                            if (allNews != null && allNews.Any())
                                            {
                                                foreach (var news in allNews)
                                                {
                                                    <tr data-category="@news.Category" data-priority="@news.Priority">
                                                        <td>@news.Id</td>
                                                        <td>
                                                            <div class="text-truncate" style="max-width: 250px;" title="@news.Title">
                                                                @news.Title
                                                            </div>
                                                        </td>
                                                        <td>
                                                            <span class="badge bg-secondary">@news.Category</span>
                                                        </td>
                                                        <td>
                                                            @if (news.Priority == "High")
                                                            {
                                                                <span class="badge bg-danger">High</span>
                                                            }
                                                            else if (news.Priority == "Medium")
                                                            {
                                                                <span class="badge bg-warning text-dark">Medium</span>
                                                            }
                                                            else
                                                            {
                                                                <span class="badge bg-info text-dark">Low</span>
                                                            }
                                                        </td>
                                                        <td>@news.Author</td>
                                                        <td>@news.PublishDate.ToString("yyyy-MM-dd")</td>
                                                        <td>
                                                            <div class="btn-group">
                                                                <button type="button" class="btn btn-sm btn-outline-primary edit-news" data-id="@news.Id" title="Edit" onclick="editNewsItem(@news.Id)">
                                                                    <i class="fas fa-edit"></i>
                                                                </button>
                                                                <button type="button" class="btn btn-sm btn-outline-danger delete-news" data-id="@news.Id" title="Delete" onclick="confirmDeleteNews(@news.Id)">
                                                                    <i class="fas fa-trash-alt"></i>
                                                                </button>
                                                            </div>
                                                        </td>
                                                    </tr>
                                                }
                                            }
                                            else
                                            {
                                                <tr>
                                                    <td colspan="7" class="text-center py-4">
                                                        <div class="text-muted">
                                                            <i class="fas fa-info-circle me-2"></i> No news posts found
                                                        </div>
                                                    </td>
                                                </tr>
                                            }
                                        }
                                        catch (Exception error)
                                        {
                                            <tr>
                                                <td colspan="7" class="text-center py-4">
                                                    <div class="text-danger">
                                                        <i class="fas fa-exclamation-triangle me-2"></i> Error loading news: @error.Message
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Edit News Modal -->
            <div id="editNewsModal" class="custom-modal">
                <div class="custom-modal-dialog">
                    <div class="custom-modal-content">
                        <div class="custom-modal-header">
                            <h5 class="custom-modal-title">Edit News</h5>
                            <button type="button" class="custom-modal-close" onclick="closeModal('editNewsModal')">&times;</button>
                        </div>
                        <div class="custom-modal-body">
                            <form id="editNewsForm">
                                <input type="hidden" id="editNewsId" name="Id" />

                                <div class="mb-3">
                                    <label for="editTitle" class="form-label">Title</label>
                                    <input type="text" class="form-control" id="editTitle" name="Title" required>
                                </div>

                                <div class="mb-3">
                                    <label for="editContent" class="form-label">Content</label>
                                    <textarea class="form-control" id="editContent" name="Content" rows="4" required></textarea>
                                </div>

                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label for="editCategory" class="form-label">Category</label>
                                            <select class="form-control" id="editCategory" name="Category" required>
                                                <option value="Updates">Updates</option>
                                                <option value="Events">Events</option>
                                                <option value="Market Insights">Market Insights</option>
                                                <option value="Success Stories">Success Stories</option>
                                                <option value="Security">Security</option>
                                            </select>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label for="editPriority" class="form-label">Priority</label>
                                            <select class="form-control" id="editPriority" name="Priority" required>
                                                <option value="High">High</option>
                                                <option value="Medium">Medium</option>
                                                <option value="Low">Low</option>
                                            </select>
                                        </div>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label for="editAuthor" class="form-label">Author</label>
                                            <input type="text" class="form-control" id="editAuthor" name="Author" required>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label for="editImageUrl" class="form-label">Image URL</label>
                                            <input type="text" class="form-control" id="editImageUrl" name="ImageUrl">
                                        </div>
                                    </div>
                                </div>
                            </form>
                        </div>
                        <div class="custom-modal-footer">
                            <button type="button" class="btn btn-secondary" onclick="closeModal('editNewsModal')">Cancel</button>
                            <button type="button" class="btn btn-primary" id="saveNewsChanges">Save Changes</button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Delete Confirmation Modal -->
            <div class="modal fade" id="deleteNewsModal" tabindex="-1" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Confirm Delete</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <p>Are you sure you want to delete this news post? This action cannot be undone.</p>
                            <form id="deleteNewsForm" action="@Url.Action("DeleteNews", "Main")" method="post">
                                @Html.AntiForgeryToken()
                                <input type="hidden" id="deleteNewsId" name="id">
                            </form>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            <button type="button" class="btn btn-danger" id="confirmDelete">Delete</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>


    </div>
</div>
<style>
    body, html {
        margin: 0;
        padding: 0;
        height: 100%;
        overflow-x: hidden;
    }

    .admin-container {
        display: flex;
        height: 100vh;
        width: 100%;
        position: fixed;
        top: 0;
        left: 0;
        z-index: 9999;
    }

    .admin-sidebar {
        width: 250px;
        background-color: #6c757d;
        color: #fff;
        height: 100%;
        overflow-y: auto;
    }

    .admin-content {
        flex: 1;
        padding: 20px;
        background-color: #f5f5f5;
        overflow-y: auto;
    }

    .admin-sidebar-header {
        padding: 20px;
        background-color: #5a6268;
        text-align: center;
        font-weight: bold;
        font-size: 1.5rem;
    }

    .admin-sidebar ul {
        list-style: none;
        padding: 0;
        margin: 0;
    }

    .admin-sidebar li {
        margin-bottom: 0;
    }

        .admin-sidebar li a {
            display: block;
            padding: 15px 20px;
            color: #fff;
            text-decoration: none;
            transition: all 0.3s;
            border-bottom: 1px solid rgba(255,255,255,0.1);
        }

            .admin-sidebar li a:hover, .admin-sidebar li a.active {
                background-color: #495057;
            }

    .admin-sidebar i {
        margin-right: 10px;
        width: 20px;
        text-align: center;
    }

    .section-header {
        margin-bottom: 5px;
        padding: 10px 20px;
        font-size: 0.8rem;
        text-transform: uppercase;
        opacity: 0.7;
    }

    .stats-card {
        background-color: #fff;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 0 10px rgba(0,0,0,0.1);
        margin-bottom: 20px;
    }

        .stats-card h3 {
            margin-top: 0;
            font-size: 1rem;
            color: #666;
        }

        .stats-card .value {
            font-size: 2rem;
            font-weight: bold;
            color: #1a237e;
        }

    .chart-container {
        background-color: #fff;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 0 10px rgba(0,0,0,0.1);
    }

    .content-section {
        display: none;
    }

    #manage-users-section {
        display: block;
    }

    /* Form Card */
    .form-card {
        background-color: #ffffff;
        border-radius: 0.5rem;
        box-shadow: 0 4px 20px rgba(0,0,0,0.08);
        overflow: hidden;
        margin-top: 1.5rem;
    }

    .card-header {
        display: flex;
        align-items: center;
        padding: 1.5rem;
        background-color: #f8f9fa;
        border-bottom: 1px solid #e9ecef;
    }

        .card-header i {
            font-size: 2rem;
            color: #3b82f6;
            margin-right: 1rem;
        }

    .card-creator {
        display: flex;
        flex-direction: column;
    }

    .creator-label {
        font-size: 0.875rem;
        color: #6c757d;
    }

    .creator-name {
        font-weight: 600;
        font-size: 1.1rem;
    }

    /* Form Sections */
    .form-sections {
        padding: 1.5rem;
    }

    .form-section {
        margin-bottom: 2rem;
    }

        .form-section h2 {
            font-size: 1.25rem;
            font-weight: 600;
            margin-bottom: 1.5rem;
            padding-bottom: 0.75rem;
            border-bottom: 1px solid #e9ecef;
            display: flex;
            align-items: center;
        }

            .form-section h2 i {
                margin-right: 0.75rem;
                color: #3b82f6;
            }

    .form-group {
        margin-bottom: 1.5rem;
    }

    .form-flex {
        display: flex;
        gap: 1.5rem;
    }

        .form-flex .form-group {
            flex: 1;
        }

    .required {
        color: #dc3545;
        margin-left: 0.25rem;
    }

    .input-hint {
        font-size: 0.875rem;
        color: #6c757d;
        margin-bottom: 0.5rem;
    }

    .validation-summary {
        color: #dc3545;
        background-color: #f8d7da;
        border: 1px solid #f5c2c7;
        border-radius: 0.375rem;
        padding: 1rem;
        margin-bottom: 1.5rem;
    }

    .form-actions {
        display: flex;
        justify-content: flex-end;
        gap: 1rem;
        padding: 1rem 1.5rem;
        border-top: 1px solid #e9ecef;
        background-color: #f8f9fa;
    }

    /* Success Message */
    .success-message {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        background-color: #d1e7dd;
        border: 1px solid #badbcc;
        color: #0f5132;
        border-radius: 0.375rem;
        padding: 1rem;
        margin-bottom: 1.5rem;
    }

        .success-message i {
            font-size: 1.25rem;
        }

    /* Additional custom styles for modals and alerts */
    .custom-modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 1050;
        overflow: auto;
    }

    .custom-modal-dialog {
        position: relative;
        width: auto;
        margin: 1.75rem auto;
        max-width: 600px;
    }

    .custom-modal-content {
        position: relative;
        display: flex;
        flex-direction: column;
        background-color: #fff;
        border-radius: 0.3rem;
        box-shadow: 0 0.25rem 0.5rem rgba(0, 0, 0, 0.5);
    }

    .custom-modal-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 1rem;
        border-bottom: 1px solid #dee2e6;
    }

    .custom-modal-title {
        margin: 0;
        font-size: 1.25rem;
    }

    .custom-modal-body {
        padding: 1rem;
    }

    .custom-modal-footer {
        display: flex;
        justify-content: flex-end;
        padding: 1rem;
        border-top: 1px solid #dee2e6;
        gap: 0.5rem;
    }

    .custom-modal-close {
        background: none;
        border: none;
        font-size: 1.5rem;
        font-weight: bold;
        line-height: 1;
        color: #000;
        opacity: 0.5;
        cursor: pointer;
    }

        .custom-modal-close:hover {
            opacity: 1;
        }

    .custom-alert {
        padding: 0.75rem 1.25rem;
        margin-bottom: 1rem;
        border: 1px solid transparent;
        border-radius: 0.25rem;
        display: flex;
        align-items: center;
    }

    .custom-alert-success {
        color: #155724;
        background-color: #d4edda;
        border-color: #c3e6cb;
    }

    .custom-alert-danger {
        color: #721c24;
        background-color: #f8d7da;
        border-color: #f5c6cb;
    }

    .custom-alert-close {
        margin-left: auto;
        background: none;
        border: none;
        font-size: 1.25rem;
        line-height: 1;
        color: inherit;
        opacity: 0.5;
        cursor: pointer;
        padding: 0 0.25rem;
    }

        .custom-alert-close:hover {
            opacity: 1;
        }
</style>

<script>
    // Get the anti-forgery token for AJAX requests
    const tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
    const antiForgeryToken = tokenElement ? tokenElement.value : '';

    // Wait for the DOM to be ready
    document.addEventListener('DOMContentLoaded', function() {
        console.log('DOM ready, initializing dashboard functions');

        // Initialize all functionality
        initTabNavigation();
        initNewsManagement();
        initUserManagement();
        initProjectManagement();

        console.log('Project management initialized');

        // Set up form clearing button
        document.querySelector('button[onclick="clearForm()"]')?.addEventListener('click', clearForm);

        // Add click handlers for modal close buttons
        document.querySelectorAll('.custom-modal-close').forEach(btn => {
            btn.addEventListener('click', function() {
                const modalId = btn.closest('.custom-modal').id;
                closeModal(modalId);
            });
        });

        // Check if we need to show a specific section (from ViewBag)
        @if (!string.IsNullOrEmpty(ViewBag.ActiveSection as string))
        {
            <text>
            // Hide all content sections
            document.querySelectorAll('.content-section').forEach(section => {
                section.style.display = 'none';
            });

            // Remove active class from all links
            document.querySelectorAll('.admin-sidebar a').forEach(link => {
                link.classList.remove('active');
            });

            // Show the specified section
            const activeSection = document.getElementById('@ViewBag.ActiveSection');
            if (activeSection) {
                activeSection.style.display = 'block';
            }

            // Add active class to corresponding link
            const activeLink = document.querySelector('.admin-sidebar a[data-section="@ViewBag.ActiveSection"]');
            if (activeLink) {
                activeLink.classList.add('active');
            }
            </text>
        }

        console.log('Dashboard initialization complete');
    });

    // Custom modal functions
    function showModal(modalId) {
        const modal = document.getElementById(modalId);
        if (modal) {
            modal.style.display = 'block';
            document.body.style.overflow = 'hidden'; // Prevent scrolling behind modal
        }
    }

    function closeModal(modalId) {
        const modal = document.getElementById(modalId);
        if (modal) {
            modal.style.display = 'none';
            document.body.style.overflow = ''; // Restore scrolling
        }
    }

    // Close modals when clicking outside
    window.addEventListener('click', function(event) {
        if (event.target.classList.contains('custom-modal')) {
            closeModal(event.target.id);
        }
    });

    // Tab navigation initialization
    function initTabNavigation() {
        const navLinks = document.querySelectorAll('.admin-sidebar a');
        navLinks.forEach(link => {
            link.addEventListener('click', function(e) {
                e.preventDefault();

                // Hide all content sections
                document.querySelectorAll('.content-section').forEach(section => {
                    section.style.display = 'none';
                });

                // Remove active class from all links
                navLinks.forEach(link => {
                    link.classList.remove('active');
                });

                // Add active class to clicked link
                this.classList.add('active');

                // Show the corresponding section
                const sectionId = this.getAttribute('data-section');
                document.getElementById(sectionId).style.display = 'block';
            });
        });
    }

    // News management initialization
    function initNewsManagement() {
        // Set up filter functionality
        const filterCategory = document.getElementById('filterCategory');
        const filterPriority = document.getElementById('filterPriority');
        const resetFilter = document.getElementById('resetFilter');
        const newsTable = document.getElementById('newsTable');

        if (filterCategory && filterPriority && resetFilter && newsTable) {
            // Apply filters function
            function applyFilters() {
                const categoryValue = filterCategory.value;
                const priorityValue = filterPriority.value;

                const rows = newsTable.querySelectorAll('tbody tr');
                rows.forEach(row => {
                    const rowCategory = row.getAttribute('data-category');
                    const rowPriority = row.getAttribute('data-priority');

                    const categoryMatch = !categoryValue || rowCategory === categoryValue;
                    const priorityMatch = !priorityValue || rowPriority === priorityValue;

                    if (categoryMatch && priorityMatch) {
                        row.style.display = '';
                    } else {
                        row.style.display = 'none';
                    }
                });
            }

            // Add filter event listeners
            filterCategory.addEventListener('change', applyFilters);
            filterPriority.addEventListener('change', applyFilters);
            resetFilter.addEventListener('click', function() {
                filterCategory.value = '';
                filterPriority.value = '';
                applyFilters();
            });
        }

        // Set up edit button functionality
        const saveNewsButton = document.getElementById('saveNewsChanges');
        if (saveNewsButton) {
            saveNewsButton.addEventListener('click', saveNewsChanges);
        }
    }

    // User management initialization
    function initUserManagement() {
        // No filtering functionality needed as we don't have user types
        console.log("User management initialized");
    }

    // Function to delete a news post
    function confirmDeleteNews(newsId) {
        if (!newsId) {
            console.error('News ID is required');
            return;
        }

        try {
            // Create the request URL
            const deleteUrl = '@Url.Action("DeleteNews", "Main")';

            // Show loading state on the button
            const button = document.querySelector(`.delete-news[data-id="${newsId}"]`);
            if (button) {
                button.disabled = true;
                button.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
            }

            // Create XHR request
            const xhr = new XMLHttpRequest();
            xhr.open('POST', deleteUrl, true);
            xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');

            // Prepare data
            const data = 'id=' + encodeURIComponent(newsId) +
                        '&__RequestVerificationToken=' + encodeURIComponent(antiForgeryToken);

            // Set up response handler
            xhr.onreadystatechange = function() {
                if (xhr.readyState === 4) {
                    // Remove the row
                    try {
                        const row = button ? button.closest('tr') : document.querySelector(`.delete-news[data-id="${newsId}"]`)?.closest('tr');
                        if (row) {
                            row.remove();
                            showNotification('success', 'News item deleted successfully.');

                            // Check if there are no more rows and add empty message if needed
                            const remainingRows = document.querySelectorAll('#newsTable tbody tr').length;
                            if (remainingRows === 0) {
                                const tbody = document.querySelector('#newsTable tbody');
                                if (tbody) {
                                    const emptyRow = document.createElement('tr');
                                    emptyRow.innerHTML = `
                                        <td colspan="7" class="text-center py-4">
                                            <div class="text-muted">
                                                <i class="fas fa-info-circle me-2"></i> No news posts found
                                            </div>
                                        </td>
                                    `;
                                    tbody.appendChild(emptyRow);
                                }
                            }
                        } else {
                            console.error('Could not find row to delete');
                            showNotification('error', 'Could not find the news item to remove from the table.');
                        }
                    } catch (e) {
                        console.error('Error removing row:', e);
                        showNotification('error', 'Error removing row: ' + e.message);
                    }
                }
            };

            // Error handler
            xhr.onerror = function() {
                console.error('Network error during delete operation');
                showNotification('error', 'Network error during delete operation.');

                // Reset button
                if (button) {
                    button.disabled = false;
                    button.innerHTML = '<i class="fas fa-trash-alt"></i>';
                }
            };

            // Send the request
            xhr.send(data);
        } catch (e) {
            console.error('Error in delete operation:', e);
            showNotification('error', 'Error: ' + e.message);
        }
    }

    // Function to show the edit form for a news item
    function editNewsItem(newsId) {
        if (!newsId) {
            console.error('News ID is required');
            return;
        }

        try {
            // Find the row for this news item
            const row = document.querySelector(`.edit-news[data-id="${newsId}"]`)?.closest('tr');
            if (!row) {
                console.error('Row not found for news ID', newsId);
                return;
            }

            // Show loading state on the button
            const button = document.querySelector(`.edit-news[data-id="${newsId}"]`);
            if (button) {
                button.disabled = true;
                button.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
            }

            // Find form elements
            const editForm = document.getElementById('editNewsForm');
            const idField = document.getElementById('editNewsId');
            const titleField = document.getElementById('editTitle');
            const contentField = document.getElementById('editContent');
            const authorField = document.getElementById('editAuthor');
            const categorySelect = document.getElementById('editCategory');
            const prioritySelect = document.getElementById('editPriority');
            const imageUrlField = document.getElementById('editImageUrl');

            if (!editForm || !idField || !titleField || !contentField || !categorySelect || !prioritySelect) {
                console.error('Required edit form elements not found');
                showNotification('error', 'Required edit form elements not found.');
                return;
            }

            // Get data from the row
            const title = row.querySelector('td:nth-child(2)')?.textContent?.trim() || '';
            const category = row.getAttribute('data-category') || '';
            const priority = row.getAttribute('data-priority') || '';
            const author = row.querySelector('td:nth-child(5)')?.textContent?.trim() || '';

            // Set values in the form
            idField.value = newsId;
            titleField.value = title;
            authorField.value = author;

            // Set content to loading message
            contentField.value = 'Loading content...';

            // Select the correct category
            if (categorySelect && category) {
                // Find the matching option
                const categories = ["Web Development", "Graphic Design", "Content Writing", "Digital Marketing", "Mobile Apps"];
                const categoryIndex = categories.indexOf(category);

                if (categoryIndex >= 0) {
                    // If we found a match in our known categories
                    categorySelect.selectedIndex = categoryIndex + 1; // +1 because the first option is empty/default
                } else {
                    // Try to match directly by value
                    for (let i = 0; i < categorySelect.options.length; i++) {
                        if (categorySelect.options[i].value === category) {
                            categorySelect.selectedIndex = i;
                            break;
                        }
                    }
                }
            }

            // Select the correct priority
            for (let i = 0; i < prioritySelect.options.length; i++) {
                if (prioritySelect.options[i].value === priority) {
                    prioritySelect.selectedIndex = i;
                    break;
                }
            }

            // Fetch the full news content from the server
            const getNewsUrl = '@Url.Action("GetNewsById", "Main")';
            const xhr = new XMLHttpRequest();
            xhr.open('GET', `${getNewsUrl}?id=${newsId}`, true);

            xhr.onreadystatechange = function() {
                if (xhr.readyState === 4) {
                    // Reset button state
                    if (button) {
                        button.disabled = false;
                        button.innerHTML = '<i class="fas fa-edit"></i>';
                    }

                    if (xhr.status === 200) {
                        try {
                            const newsData = JSON.parse(xhr.responseText);
                            if (newsData.success) {
                                contentField.value = newsData.Content || '';
                                if (imageUrlField) {
                                    imageUrlField.value = newsData.ImageUrl || '';
                                }
                                // Show the modal only after content is loaded
                                showModal('editNewsModal');
                            } else {
                                contentField.value = 'Error: ' + (newsData.message || 'Could not load content.');
                                showNotification('error', newsData.message || 'Could not load news content.');
                            }
                        } catch (e) {
                            console.error('Error parsing news data:', e);
                            contentField.value = 'Error parsing server response.';
                            showNotification('error', 'Error parsing server response.');
                        }
                    } else {
                        console.error('Server error:', xhr.status);
                        contentField.value = 'Error loading content. Server returned status ' + xhr.status;
                        showNotification('error', 'Server error: ' + xhr.status);
                    }
                }
            };

            xhr.onerror = function() {
                console.error('Network error while fetching news content');

                // Reset button
                if (button) {
                    button.disabled = false;
                    button.innerHTML = '<i class="fas fa-edit"></i>';
                }

                showNotification('error', 'Network error while fetching news content.');
            };

            xhr.send();
        } catch (e) {
            console.error('Error preparing edit form:', e);
            showNotification('error', 'Error preparing edit form: ' + e.message);
        }
    }

    // Function to save edited news
    function saveNewsChanges() {
        try {
            const saveButton = document.getElementById('saveNewsChanges');
            const editForm = document.getElementById('editNewsForm');

            if (!editForm) {
                console.error('Edit form not found');
                return;
            }

            // Validate form fields
            const requiredFields = ['editTitle', 'editContent', 'editCategory', 'editPriority', 'editAuthor'];
            let isValid = true;

            requiredFields.forEach(fieldId => {
                const field = document.getElementById(fieldId);
                if (!field || !field.value.trim()) {
                    isValid = false;
                    if (field) {
                        field.classList.add('is-invalid');
                    }
                } else if (field) {
                    field.classList.remove('is-invalid');
                }
            });

            if (!isValid) {
                showNotification('error', 'Please fill in all required fields.');
                return;
            }

            // Disable save button and show loading
            if (saveButton) {
                saveButton.disabled = true;
                saveButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Saving...';
            }

            // Create FormData
            const formData = new FormData(editForm);
            formData.append('__RequestVerificationToken', antiForgeryToken);

            // Convert FormData to URL encoded string
            const data = new URLSearchParams();
            for (const [key, value] of formData.entries()) {
                data.append(key, value);
                console.log(`${key}: ${value}`); // Debug: log the form values
            }

            const saveUrl = '@Url.Action("EditNews", "Main")';
            console.log('Saving news to URL:', saveUrl); // Debug: log the save URL

            const xhr = new XMLHttpRequest();
            xhr.open('POST', saveUrl, true);
            xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');

            xhr.onreadystatechange = function() {
                if (xhr.readyState === 4) {
                    // Enable button
                    if (saveButton) {
                        saveButton.disabled = false;
                        saveButton.innerHTML = 'Save Changes';
                    }

                    // Hide modal
                    closeModal('editNewsModal');

                    if (xhr.status === 200) {
                        try {
                            console.log('Server response:', xhr.responseText); // Debug: log the server response
                            const response = JSON.parse(xhr.responseText);
                            if (response.success) {
                                showNotification('success', 'News item updated successfully.');

                                // Update the row in the table with new values
                                const newsId = formData.get('Id');
                                const row = document.querySelector(`.edit-news[data-id="${newsId}"]`)?.closest('tr');

                                console.log('Found row:', row); // Debug: verify we found the row

                                if (row) {
                                    // Update data attributes
                                    row.setAttribute('data-category', formData.get('Category'));
                                    row.setAttribute('data-priority', formData.get('Priority'));

                                    // Update visible fields
                                    row.querySelector('td:nth-child(2)').innerHTML = `
                                        <div class="text-truncate" style="max-width: 250px;" title="${formData.get('Title')}">
                                            ${formData.get('Title')}
                                        </div>
                                    `;

                                    // Update category badge
                                    const categoryCell = row.querySelector('td:nth-child(3)');
                                    categoryCell.innerHTML = `<span class="badge bg-secondary">${formData.get('Category')}</span>`;

                                    // Update budget
                                    row.querySelector('td:nth-child(4)').textContent = formData.get('Budget');

                                    // Update deadline if provided
                                    const deadlineCell = row.querySelector('td:nth-child(5)');
                                    const deadlineValue = formData.get('Deadline');
                                    deadlineCell.textContent = deadlineValue || 'No deadline';

                                    console.log('Row updated successfully'); // Debug: confirm the update completed
                                } else {
                                    console.error('Could not find row to update'); // Debug: log error finding the row
                                }
                            } else {
                                showNotification('error', response.message || 'Failed to update news post.');
                            }
                        } catch (e) {
                            console.error('Error parsing response:', e);
                            showNotification('error', 'Error parsing server response.');
                        }
                    } else {
                        console.error('Server error:', xhr.status);
                        showNotification('error', 'Server error: ' + xhr.status);
                    }
                }
            };

            xhr.onerror = function() {
                console.error('Network error during save operation');

                // Enable button
                if (saveButton) {
                    saveButton.disabled = false;
                    saveButton.innerHTML = 'Save Changes';
                }

                showNotification('error', 'Network error during save operation.');
            };

            xhr.send(data.toString());
        } catch (e) {
            console.error('Error saving news:', e);
            showNotification('error', 'Error saving news: ' + e.message);
        }
    }

    // Function to clear form
    function clearForm() {
        const formFields = ['Title', 'Content', 'Category', 'Priority', 'ImageUrl'];
        formFields.forEach(fieldId => {
            const field = document.getElementById(fieldId);
            if (field) {
                if (field.tagName === 'SELECT') {
                    field.selectedIndex = 0;
                } else {
                    field.value = '';
                }
            }
        });
    }

    // Function to show notification
    function showNotification(type, message) {
        // Create custom alert element
        const alertDiv = document.createElement('div');
        alertDiv.className = type === 'success' ? 'custom-alert custom-alert-success' : 'custom-alert custom-alert-danger';

        // Add content
        alertDiv.innerHTML = `
            <i class="fas ${type === 'success' ? 'fa-check-circle' : 'fa-exclamation-triangle'} me-2"></i>
            <span>${message}</span>
            <button type="button" class="custom-alert-close" onclick="this.parentElement.remove()">&times;</button>
        `;

        // Find the active section
        const activeSection = document.querySelector('.content-section[style*="display: block"]');
        if (activeSection) {
            const firstChild = activeSection.querySelector('.row, h1');
            if (firstChild) {
                activeSection.insertBefore(alertDiv, firstChild);
            } else {
                activeSection.appendChild(alertDiv);
            }
        } else {
            // Fallback to manage-posts section
            const section = document.getElementById('manage-posts-section');
            if (section) {
                const firstChild = section.querySelector('.row');
                section.insertBefore(alertDiv, firstChild);
            }
        }

        // Automatically dismiss after 3 seconds
        setTimeout(() => {
            if (alertDiv.parentNode) {
                alertDiv.parentNode.removeChild(alertDiv);
            }
        }, 3000);
    }

    // Function to delete a user
    function confirmDeleteUser(userId) {
        if (!userId) {
            console.error('User ID is required');
            return;
        }

        try {
            // Create the request URL
            const deleteUrl = '@Url.Action("DeleteUser", "Main")';

            // Show loading state on the button
            const button = document.querySelector(`.delete-user[data-id="${userId}"]`);
            if (button) {
                button.disabled = true;
                button.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
            }

            // Create XHR request
            const xhr = new XMLHttpRequest();
            xhr.open('POST', deleteUrl, true);
            xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');

            // Prepare data
            const data = 'id=' + encodeURIComponent(userId) +
                        '&__RequestVerificationToken=' + encodeURIComponent(antiForgeryToken);

            // Set up response handler
            xhr.onreadystatechange = function() {
                if (xhr.readyState === 4) {
                    try {
                        const response = JSON.parse(xhr.responseText);

                        if (response.success) {
                            // Remove the row
                            const row = button ? button.closest('tr') : document.querySelector(`.delete-user[data-id="${userId}"]`)?.closest('tr');
                            if (row) {
                                row.remove();
                                showNotification('success', 'User deleted successfully.');

                                // Check if there are no more rows and add empty message if needed
                                const remainingRows = document.querySelectorAll('#usersTable tbody tr').length;
                                if (remainingRows === 0) {
                                    const tbody = document.querySelector('#usersTable tbody');
                                    if (tbody) {
                                        const emptyRow = document.createElement('tr');
                                        emptyRow.innerHTML = `
                                            <td colspan="6" class="text-center py-4">
                                                <div class="text-muted">
                                                    <i class="fas fa-info-circle me-2"></i> No users found
                                                </div>
                                            </td>
                                        `;
                                        tbody.appendChild(emptyRow);
                                    }
                                }
                            }
                        } else {
                            showNotification('error', response.message || 'Failed to delete user.');

                            // Reset button
                            if (button) {
                                button.disabled = false;
                                button.innerHTML = '<i class="fas fa-trash-alt"></i>';
                            }
                        }
                    } catch (e) {
                        console.error('Error parsing response:', e);
                        showNotification('error', 'Error parsing server response.');

                        // Reset button
                        if (button) {
                            button.disabled = false;
                            button.innerHTML = '<i class="fas fa-trash-alt"></i>';
                        }
                    }
                }
            };

            // Error handler
            xhr.onerror = function() {
                console.error('Network error during delete operation');
                showNotification('error', 'Network error during delete operation.');

                // Reset button
                if (button) {
                    button.disabled = false;
                    button.innerHTML = '<i class="fas fa-trash-alt"></i>';
                }
            };

            // Send the request
            xhr.send(data);
        } catch (e) {
            console.error('Error in delete operation:', e);
            showNotification('error', 'Error: ' + e.message);
        }
    }

    // Initialize project management functionality
    function initProjectManagement() {
        console.log('Initializing project management');

        // Set up filter functionality
        const filterCategory = document.getElementById('filterCategory');
        const resetProjectFilter = document.getElementById('resetProjectFilter');
        const projectsTable = document.getElementById('projectsTable');

        if (filterCategory && resetProjectFilter && projectsTable) {
            // Apply filters function
            function applyProjectFilters() {
                const categoryValue = filterCategory.value;

                const rows = projectsTable.querySelectorAll('tbody tr');
                rows.forEach(row => {
                    const rowCategory = row.getAttribute('data-category');

                    const categoryMatch = !categoryValue || rowCategory === categoryValue;

                    if (categoryMatch) {
                        row.style.display = '';
                    } else {
                        row.style.display = 'none';
                    }
                });
            }

            // Add filter event listeners
            filterCategory.addEventListener('change', applyProjectFilters);
            resetProjectFilter.addEventListener('click', function() {
                filterCategory.value = '';
                applyProjectFilters();
            });
        }

        // Set up edit button functionality
        const saveProjectButton = document.getElementById('saveProjectChanges');
        if (saveProjectButton) {
            console.log('Found save project button, adding event listener');
            saveProjectButton.addEventListener('click', function() {
                console.log('Save project button clicked');
                saveProjectChanges();
            });
        } else {
            console.error('Save project button not found in the DOM');
        }
    }

    // Function to delete a project
    function confirmDeleteProject(projectId) {
        if (!projectId) {
            console.error('Project ID is required');
            return;
        }

        try {
            // Create the request URL
            const deleteUrl = '@Url.Action("DeleteProject", "Main")';

            // Show loading state on the button
            const button = document.querySelector(`.delete-project[data-id="${projectId}"]`);
            if (button) {
                button.disabled = true;
                button.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
            }

            // Create XHR request
            const xhr = new XMLHttpRequest();
            xhr.open('POST', deleteUrl, true);
            xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');

            // Prepare data
            const data = 'id=' + encodeURIComponent(projectId) +
                        '&__RequestVerificationToken=' + encodeURIComponent(antiForgeryToken);

            // Set up response handler
            xhr.onreadystatechange = function() {
                if (xhr.readyState === 4) {
                    // Remove the row
                    try {
                        const row = button ? button.closest('tr') : document.querySelector(`.delete-project[data-id="${projectId}"]`)?.closest('tr');
                        if (row) {
                            row.remove();
                            showNotification('success', 'Project deleted successfully.');

                            // Check if there are no more rows and add empty message if needed
                            const remainingRows = document.querySelectorAll('#projectsTable tbody tr').length;
                            if (remainingRows === 0) {
                                const tbody = document.querySelector('#projectsTable tbody');
                                if (tbody) {
                                    const emptyRow = document.createElement('tr');
                                    emptyRow.innerHTML = `
                                        <td colspan="7" class="text-center py-4">
                                            <div class="text-muted">
                                                <i class="fas fa-info-circle me-2"></i> No projects found
                                            </div>
                                        </td>
                                    `;
                                    tbody.appendChild(emptyRow);
                                }
                            }
                        } else {
                            console.error('Could not find row to delete');
                            showNotification('error', 'Could not find the project to remove from the table.');
                        }
                    } catch (e) {
                        console.error('Error removing row:', e);
                        showNotification('error', 'Error removing row: ' + e.message);
                    }
                }
            };

            // Error handler
            xhr.onerror = function() {
                console.error('Network error during delete operation');
                showNotification('error', 'Network error during delete operation.');

                // Reset button
                if (button) {
                    button.disabled = false;
                    button.innerHTML = '<i class="fas fa-trash-alt"></i>';
                }
            };

            // Send the request
            xhr.send(data);
        } catch (e) {
            console.error('Error in delete operation:', e);
            showNotification('error', 'Error: ' + e.message);
        }
    }

    // Function to edit project
    function editProjectItem(projectId) {
        if (!projectId) {
            console.error('Project ID is required');
            return;
        }

        try {
            // Find the row for this project item
            const row = document.querySelector(`.edit-project[data-id="${projectId}"]`)?.closest('tr');
            if (!row) {
                console.error('Row not found for project ID', projectId);
                return;
            }

            // Show loading state on the button
            const button = document.querySelector(`.edit-project[data-id="${projectId}"]`);
            if (button) {
                button.disabled = true;
                button.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
            }

            // Find form elements
            const editForm = document.getElementById('editProjectForm');
            const idField = document.getElementById('editProjectId');
            const titleField = document.getElementById('editProjectTitle');
            const descriptionField = document.getElementById('editProjectDescription');
            const categorySelect = document.getElementById('editProjectCategory');
            const budgetField = document.getElementById('editProjectBudget');
            const deadlineField = document.getElementById('editProjectDeadline');
            const skillsField = document.getElementById('editProjectRequiredSkills');

            if (!editForm || !idField || !titleField || !descriptionField || !categorySelect || !budgetField) {
                console.error('Required edit form elements not found');
                showNotification('error', 'Required edit form elements not found.');
                return;
            }

            // Get data from the server for this project
            const getProjectUrl = '@Url.Action("GetProjectById", "Main")';
            const xhr = new XMLHttpRequest();
            xhr.open('GET', `${getProjectUrl}?id=${projectId}`, true);

            xhr.onreadystatechange = function() {
                if (xhr.readyState === 4) {
                    // Reset button state
                    if (button) {
                        button.disabled = false;
                        button.innerHTML = '<i class="fas fa-edit"></i>';
                    }

                    if (xhr.status === 200) {
                        try {
                            const projectData = JSON.parse(xhr.responseText);
                            if (projectData.success) {
                                // Set values in the form
                                idField.value = projectData.Id;
                                titleField.value = projectData.Title || '';
                                descriptionField.value = projectData.Description || '';
                                budgetField.value = projectData.Budget || '';

                                if (deadlineField && projectData.Deadline) {
                                    // Set the deadline dropdown
                                    for (let i = 0; i < deadlineField.options.length; i++) {
                                        if (deadlineField.options[i].value === projectData.Deadline) {
                                            deadlineField.selectedIndex = i;
                                            break;
                                        }
                                    }
                                } else if (deadlineField) {
                                    deadlineField.selectedIndex = 0; // default to "No deadline"
                                }

                                if (skillsField) {
                                    skillsField.value = projectData.RequiredSkills || '';
                                }

                                // Select the correct category
                                if (categorySelect && projectData.Category) {
                                    // Find the matching option
                                    const categories = ["Web Development", "Graphic Design", "Content Writing", "Digital Marketing", "Mobile Apps"];
                                    const categoryIndex = categories.indexOf(projectData.Category);

                                    if (categoryIndex >= 0) {
                                        // If we found a match in our known categories
                                        categorySelect.selectedIndex = categoryIndex + 1; // +1 because the first option is empty/default
                                    } else {
                                        // Try to match directly by value
                                        for (let i = 0; i < categorySelect.options.length; i++) {
                                            if (categorySelect.options[i].value === projectData.Category) {
                                                categorySelect.selectedIndex = i;
                                                break;
                                            }
                                        }
                                    }
                                }

                                // Show the modal
                                showModal('editProjectModal');
                            } else {
                                showNotification('error', projectData.message || 'Could not load project data.');
                            }
                        } catch (e) {
                            console.error('Error parsing project data:', e);
                            showNotification('error', 'Error parsing server response.');
                        }
                    } else {
                        console.error('Server error:', xhr.status);
                        showNotification('error', 'Server error: ' + xhr.status);
                    }
                }
            };

            xhr.onerror = function() {
                console.error('Network error while fetching project data');

                // Reset button
                if (button) {
                    button.disabled = false;
                    button.innerHTML = '<i class="fas fa-edit"></i>';
                }

                showNotification('error', 'Network error while fetching project data.');
            };

            xhr.send();
        } catch (e) {
            console.error('Error preparing edit form:', e);
            showNotification('error', 'Error preparing edit form: ' + e.message);
        }
    }

    // Function to save project changes
    function saveProjectChanges() {
        try {
            const saveButton = document.getElementById('saveProjectChanges');
            const editForm = document.getElementById('editProjectForm');

            if (!editForm) {
                console.error('Edit form not found');
                return;
            }

            // Validate form fields
            const requiredFields = ['editProjectTitle', 'editProjectDescription', 'editProjectCategory', 'editProjectBudget'];
            let isValid = true;

            requiredFields.forEach(fieldId => {
                const field = document.getElementById(fieldId);
                if (!field || !field.value.trim()) {
                    isValid = false;
                    if (field) {
                        field.classList.add('is-invalid');
                    }
                } else if (field) {
                    field.classList.remove('is-invalid');
                }
            });

            if (!isValid) {
                showNotification('error', 'Please fill in all required fields.');
                return;
            }

            // Disable save button and show loading
            if (saveButton) {
                saveButton.disabled = true;
                saveButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Saving...';
            }

            // Create FormData
            const formData = new FormData(editForm);
            formData.append('__RequestVerificationToken', antiForgeryToken);

            // Convert FormData to URL encoded string
            const data = new URLSearchParams();
            for (const [key, value] of formData.entries()) {
                data.append(key, value);
                console.log(`${key}: ${value}`); // Debug: log the form values
            }

            const saveUrl = '@Url.Action("EditProject", "Main")';
            console.log('Saving project to URL:', saveUrl); // Debug: log the save URL

            const xhr = new XMLHttpRequest();
            xhr.open('POST', saveUrl, true);
            xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');

            xhr.onreadystatechange = function() {
                if (xhr.readyState === 4) {
                    // Enable button
                    if (saveButton) {
                        saveButton.disabled = false;
                        saveButton.innerHTML = 'Save Changes';
                    }

                    // Hide modal
                    closeModal('editProjectModal');

                    if (xhr.status === 200) {
                        try {
                            console.log('Server response:', xhr.responseText); // Debug: log the server response
                            const response = JSON.parse(xhr.responseText);
                            if (response.success) {
                                showNotification('success', 'Project updated successfully.');

                                // Update the row in the table with new values
                                const projectId = formData.get('Id');
                                const row = document.querySelector(`.edit-project[data-id="${projectId}"]`)?.closest('tr');

                                console.log('Found row:', row); // Debug: verify we found the row

                                if (row) {
                                    // Update data attributes
                                    row.setAttribute('data-category', formData.get('Category'));

                                    // Update visible fields
                                    row.querySelector('td:nth-child(2)').innerHTML = `
                                        <div class="text-truncate" style="max-width: 250px;" title="${formData.get('Title')}">
                                            ${formData.get('Title')}
                                        </div>
                                    `;

                                    // Update category badge
                                    const categoryCell = row.querySelector('td:nth-child(3)');
                                    categoryCell.innerHTML = `<span class="badge bg-secondary">${formData.get('Category')}</span>`;

                                    // Update budget
                                    row.querySelector('td:nth-child(4)').textContent = formData.get('Budget');

                                    // Update deadline if provided
                                    const deadlineCell = row.querySelector('td:nth-child(5)');
                                    const deadlineValue = formData.get('Deadline');
                                    deadlineCell.textContent = deadlineValue || 'No deadline';

                                    console.log('Row updated successfully'); // Debug: confirm the update completed
                                } else {
                                    console.error('Could not find row to update'); // Debug: log error finding the row
                                }
                            } else {
                                showNotification('error', response.message || 'Failed to update project.');
                            }
                        } catch (e) {
                            console.error('Error parsing response:', e);
                            showNotification('error', 'Error parsing server response.');
                        }
                    } else {
                        console.error('Server error:', xhr.status);
                        showNotification('error', 'Server error: ' + xhr.status);
                    }
                }
            };

            xhr.onerror = function() {
                console.error('Network error during save operation');

                // Enable button
                if (saveButton) {
                    saveButton.disabled = false;
                    saveButton.innerHTML = 'Save Changes';
                }

                showNotification('error', 'Network error during save operation.');
            };

            xhr.send(data.toString());
        } catch (e) {
            console.error('Error saving project:', e);
            showNotification('error', 'Error saving project: ' + e.message);
        }
    }
</script> 