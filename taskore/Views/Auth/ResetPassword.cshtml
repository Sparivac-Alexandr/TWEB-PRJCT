@using System.Web.Optimization
@model taskore.Models.Auth.NewPasswordModel
@{
    ViewBag.Title = "Reset Password";
}
@Styles.Render("~/Content/css")

<body>
    <div class="auth-right">
        <div class="auth-form-container">
            <div class="auth-header">
                <h1>Reset Password</h1>
                <p>Enter the code from your email and create a new password</p>
            </div>

            @if (TempData["SuccessMessage"] != null)
            {
                <div class="alert alert-success">
                    @TempData["SuccessMessage"]
                </div>
            }

            @if (TempData["ErrorMessage"] != null)
            {
                <div class="alert alert-danger">
                    @TempData["ErrorMessage"]
                </div>
            }

            @using (Html.BeginForm("ResetPassword", "Auth", FormMethod.Post, new { id = "reset-password-form" }))
            {
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="input-group">
                    @Html.TextBoxFor(m => m.Email, new
                    {
                        placeholder = "Email address",
                        @required = "required",
                        type = "email"
                    })
                    @Html.ValidationMessageFor(m => m.Email, "", new { @class = "text-danger" })
                </div>
                <div class="input-group">
                    @Html.TextBoxFor(m => m.ResetCode, new
                    {
                        placeholder = "Reset Code",
                        @required = "required"
                    })
                    @Html.ValidationMessageFor(m => m.ResetCode, "", new { @class = "text-danger" })
                </div>
                <div class="input-group">
                    @Html.PasswordFor(m => m.NewPassword, new
                    {
                        placeholder = "New Password (minimum 6 characters)",
                        @required = "required",
                        id = "reset-password"
                    })
                    <span class="password-toggle" onclick="togglePassword('reset-password')">Show</span>
                    @Html.ValidationMessageFor(m => m.NewPassword, "", new { @class = "text-danger" })
                </div>
                <div class="input-group">
                    @Html.PasswordFor(m => m.ConfirmPassword, new
                    {
                        placeholder = "Confirm New Password",
                        @required = "required",
                        id = "reset-confirm-password"
                    })
                    <span class="password-toggle" onclick="togglePassword('reset-confirm-password')">Show</span>
                    @Html.ValidationMessageFor(m => m.ConfirmPassword, "", new { @class = "text-danger" })
                </div>
                <button type="submit" class="submit-button">Reset Password</button>
                <div class="back-link">
                    <a href="@Url.Action("SignIn", "Auth")">Back to Login</a>
                </div>
            }
        </div>
    </div>

    <script>
        function togglePassword(id) {
            var passwordField = document.getElementById(id);
            var toggleButton = passwordField.nextElementSibling;
            
            if (passwordField.type === "password") {
                passwordField.type = "text";
                toggleButton.textContent = "Hide";
            } else {
                passwordField.type = "password";
                toggleButton.textContent = "Show";
            }
        }
    </script>
</body> 