using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using taskoreBusinessLogic.Core;
using taskoreBusinessLogic.DBModel;
using taskoreBusinessLogic.DBModel.Seed;
using taskoreBusinessLogic.Interfaces;
using taskoreDomain.Enteties.User;
using System.Diagnostics;
using taskoreHelpers;

namespace taskoreBusinessLogic.BL_Struct
{
   public class AuthBL : UserApi, IAuth
    {
        public string UserAuthLogic(UserLoginDTO data)
        {
            return UserAuthLogicAction(data);
        }

        public bool UserRegisterLogic(UserRegisterDTO data)
        {
            try
            {
                Debug.WriteLine("Starting registration process for email: " + data.Email);
                
                var context = new UserContext();
                Debug.WriteLine("Database connection established");
                
                // Check if the email already exists in the database
                bool emailExists = context.Users.Any(u => u.Email.ToLower() == data.Email.ToLower());
                if (emailExists)
                {
                    Debug.WriteLine("ERROR: Email already exists in the database: " + data.Email);
                    return false;
                }
                
                // Hash the password before storing it
                string hashedPassword = HashGenerator.HashGen(data.Password);
                Debug.WriteLine("Password hashed successfully");
                
                // The ID will be auto-generated by the database since we've configured it as 
                // [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
                var newUser = new UDBModel
                {
                    Email = data.Email,
                    FirstName = data.FirstName,
                    Password = hashedPassword,
                    LastName = data.LastName
                    // Not setting Id manually as it will be auto-generated
                };
                
                Debug.WriteLine("Created new user object with data: " + 
                    $"Email={newUser.Email}, Name={newUser.FirstName} {newUser.LastName}");
                
                context.Users.Add(newUser);
                Debug.WriteLine("Added user to context");
                
                int rowsAffected = context.SaveChanges();
                Debug.WriteLine("SaveChanges completed. Rows affected: " + rowsAffected);
                Debug.WriteLine("New user ID assigned by database: " + newUser.Id);
                
                return rowsAffected > 0;
            }
            catch (Exception ex)
            {
                Debug.WriteLine("ERROR in UserRegisterLogic: " + ex.Message);
                if (ex.InnerException != null)
                {
                    Debug.WriteLine("Inner exception: " + ex.InnerException.Message);
                }
                Debug.WriteLine("Stack trace: " + ex.StackTrace);
                return false;
            }
        }
    }
}
